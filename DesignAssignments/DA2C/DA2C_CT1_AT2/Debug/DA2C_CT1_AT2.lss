
DA2C_CT1_AT2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000114  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000000c0  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  00000114  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000144  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000020  00000000  00000000  00000184  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000006ab  00000000  00000000  000001a4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000610  00000000  00000000  0000084f  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000232  00000000  00000000  00000e5f  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000024  00000000  00000000  00001094  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000341  00000000  00000000  000010b8  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000073  00000000  00000000  000013f9  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000010  00000000  00000000  0000146c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   8:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  10:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  14:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  18:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  1c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  20:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  24:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  28:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  2c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  30:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  34:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  38:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  3c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  40:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  44:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  48:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  4c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  50:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  54:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  58:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  5c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  60:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  64:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61
  74:	0e 94 40 00 	call	0x80	; 0x80 <main>
  78:	0c 94 5e 00 	jmp	0xbc	; 0xbc <_exit>

0000007c <__bad_interrupt>:
  7c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000080 <main>:
#include <avr/io.h>


int main(void)
{
    DDRC &= (0<<2);						//set PINC.2 as input
  80:	87 b1       	in	r24, 0x07	; 7
  82:	17 b8       	out	0x07, r1	; 7
	DDRB |= (1<<2);						//set PORTB.2 as output
  84:	22 9a       	sbi	0x04, 2	; 4
	PORTC |= (1<<2);					//Turn on pull-up
  86:	42 9a       	sbi	0x08, 2	; 8
	TCCR0A |= (1<<COM0A1) | (1<<COM0A0); //set up timer control register
  88:	84 b5       	in	r24, 0x24	; 36
  8a:	80 6c       	ori	r24, 0xC0	; 192
  8c:	84 bd       	out	0x24, r24	; 36
	TCCR0B |= (1<<CS02);				//set up prescaler = 256
  8e:	85 b5       	in	r24, 0x25	; 37
  90:	84 60       	ori	r24, 0x04	; 4
  92:	85 bd       	out	0x25, r24	; 37
	while(1){
		 if (!(PINC & (1<<PINC2))){		//check if PINC is set
  94:	32 99       	sbic	0x06, 2	; 6
  96:	fe cf       	rjmp	.-4      	; 0x94 <main+0x14>
			 PORTB |= (1<<2);			//turn on LED
  98:	2a 9a       	sbi	0x05, 2	; 5
  9a:	22 e1       	ldi	r18, 0x12	; 18
  9c:	30 e0       	ldi	r19, 0x00	; 0
			 for (int i = 1; i <= 18; i++){
				  TIFR0 |= (1<<TOV0);	//reset flag
  9e:	a8 9a       	sbi	0x15, 0	; 21
				  TCNT0 = 0;			//reset timer counter
  a0:	16 bc       	out	0x26, r1	; 38
  a2:	81 e1       	ldi	r24, 0x11	; 17
  a4:	90 e0       	ldi	r25, 0x00	; 0
				 for (int j = 1; j<=17; j++){
					while ((TIFR0 & (1<<TOV0)) == 0);	//wait until overflow flag is set
  a6:	a8 9b       	sbis	0x15, 0	; 21
  a8:	fe cf       	rjmp	.-4      	; 0xa6 <main+0x26>
					TIFR0 |= (1<<TOV0);	//reset flag
  aa:	a8 9a       	sbi	0x15, 0	; 21
  ac:	01 97       	sbiw	r24, 0x01	; 1
		 if (!(PINC & (1<<PINC2))){		//check if PINC is set
			 PORTB |= (1<<2);			//turn on LED
			 for (int i = 1; i <= 18; i++){
				  TIFR0 |= (1<<TOV0);	//reset flag
				  TCNT0 = 0;			//reset timer counter
				 for (int j = 1; j<=17; j++){
  ae:	d9 f7       	brne	.-10     	; 0xa6 <main+0x26>
  b0:	21 50       	subi	r18, 0x01	; 1
  b2:	31 09       	sbc	r19, r1
	TCCR0A |= (1<<COM0A1) | (1<<COM0A0); //set up timer control register
	TCCR0B |= (1<<CS02);				//set up prescaler = 256
	while(1){
		 if (!(PINC & (1<<PINC2))){		//check if PINC is set
			 PORTB |= (1<<2);			//turn on LED
			 for (int i = 1; i <= 18; i++){
  b4:	a1 f7       	brne	.-24     	; 0x9e <main+0x1e>
				 for (int j = 1; j<=17; j++){
					while ((TIFR0 & (1<<TOV0)) == 0);	//wait until overflow flag is set
					TIFR0 |= (1<<TOV0);	//reset flag
				 }
			 }	
			PORTB &= (0<<2);			//turn off LED	 
  b6:	85 b1       	in	r24, 0x05	; 5
  b8:	15 b8       	out	0x05, r1	; 5
  ba:	ec cf       	rjmp	.-40     	; 0x94 <main+0x14>

000000bc <_exit>:
  bc:	f8 94       	cli

000000be <__stop_program>:
  be:	ff cf       	rjmp	.-2      	; 0xbe <__stop_program>
