
DA2C_CT2_AT2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000182  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000010e  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000002  00800100  00800100  00000182  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000182  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000001b4  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000028  00000000  00000000  000001f4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000006a8  00000000  00000000  0000021c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000626  00000000  00000000  000008c4  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000023e  00000000  00000000  00000eea  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000048  00000000  00000000  00001128  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000367  00000000  00000000  00001170  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000049  00000000  00000000  000014d7  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000018  00000000  00000000  00001520  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   8:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  10:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  14:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  18:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  1c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  20:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  24:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  28:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  2c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  30:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  34:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  38:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  3c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  40:	0c 94 5f 00 	jmp	0xbe	; 0xbe <__vector_16>
  44:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  48:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  4c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  50:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  54:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  58:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  5c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  60:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  64:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_clear_bss>:
  74:	21 e0       	ldi	r18, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	01 c0       	rjmp	.+2      	; 0x7e <.do_clear_bss_start>

0000007c <.do_clear_bss_loop>:
  7c:	1d 92       	st	X+, r1

0000007e <.do_clear_bss_start>:
  7e:	a2 30       	cpi	r26, 0x02	; 2
  80:	b2 07       	cpc	r27, r18
  82:	e1 f7       	brne	.-8      	; 0x7c <.do_clear_bss_loop>
  84:	0e 94 48 00 	call	0x90	; 0x90 <main>
  88:	0c 94 85 00 	jmp	0x10a	; 0x10a <_exit>

0000008c <__bad_interrupt>:
  8c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000090 <main>:
static volatile int count0 = 0;

int main(void)
{

	DDRB |= (1<<DDB2);		//PB2 as output
  90:	22 9a       	sbi	0x04, 2	; 4
	TIMSK0 |= (1<<TOIE0);	//enable timer overflow interrupt
  92:	ee e6       	ldi	r30, 0x6E	; 110
  94:	f0 e0       	ldi	r31, 0x00	; 0
  96:	80 81       	ld	r24, Z
  98:	81 60       	ori	r24, 0x01	; 1
  9a:	80 83       	st	Z, r24
	TCNT0 = 0x0;
  9c:	16 bc       	out	0x26, r1	; 38
	sei();					//enable interrupts
  9e:	78 94       	sei
	TCCR0A |= (1<<COM0A1) | (1<<COM0A0);
  a0:	84 b5       	in	r24, 0x24	; 36
  a2:	80 6c       	ori	r24, 0xC0	; 192
  a4:	84 bd       	out	0x24, r24	; 36
	TCCR0B |= (1<<CS02) | (1<<CS00);
  a6:	85 b5       	in	r24, 0x25	; 37
  a8:	85 60       	ori	r24, 0x05	; 5
  aa:	85 bd       	out	0x25, r24	; 37
	while (1){	
		
		if (!(PINC & (1<<PINC2))){		//check if PINC is set
  ac:	32 99       	sbic	0x06, 2	; 6
  ae:	fe cf       	rjmp	.-4      	; 0xac <main+0x1c>
			PORTB |= (1<<2);
  b0:	2a 9a       	sbi	0x05, 2	; 5
			TCNT0 = 0;
  b2:	16 bc       	out	0x26, r1	; 38
			count0 = 0;
  b4:	10 92 01 01 	sts	0x0101, r1	; 0x800101 <_edata+0x1>
  b8:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <_edata>
  bc:	f7 cf       	rjmp	.-18     	; 0xac <main+0x1c>

000000be <__vector_16>:
	}
   
}


ISR (TIMER0_OVF_vect){						//timer0 overflow interrupt
  be:	1f 92       	push	r1
  c0:	0f 92       	push	r0
  c2:	0f b6       	in	r0, 0x3f	; 63
  c4:	0f 92       	push	r0
  c6:	11 24       	eor	r1, r1
  c8:	8f 93       	push	r24
  ca:	9f 93       	push	r25
	
	if (count0 == 76){
  cc:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
  d0:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <_edata+0x1>
  d4:	8c 34       	cpi	r24, 0x4C	; 76
  d6:	91 05       	cpc	r25, r1
  d8:	41 f4       	brne	.+16     	; 0xea <__vector_16+0x2c>
			PORTB &= (0<<2);
  da:	85 b1       	in	r24, 0x05	; 5
  dc:	15 b8       	out	0x05, r1	; 5
			count0 = 0;
  de:	10 92 01 01 	sts	0x0101, r1	; 0x800101 <_edata+0x1>
  e2:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <_edata>
			TCNT0 = 0;
  e6:	16 bc       	out	0x26, r1	; 38
  e8:	09 c0       	rjmp	.+18     	; 0xfc <__vector_16+0x3e>
	}	
	else	
		count0++;
  ea:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
  ee:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <_edata+0x1>
  f2:	01 96       	adiw	r24, 0x01	; 1
  f4:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <_edata+0x1>
  f8:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <_edata>
}
  fc:	9f 91       	pop	r25
  fe:	8f 91       	pop	r24
 100:	0f 90       	pop	r0
 102:	0f be       	out	0x3f, r0	; 63
 104:	0f 90       	pop	r0
 106:	1f 90       	pop	r1
 108:	18 95       	reti

0000010a <_exit>:
 10a:	f8 94       	cli

0000010c <__stop_program>:
 10c:	ff cf       	rjmp	.-2      	; 0x10c <__stop_program>
