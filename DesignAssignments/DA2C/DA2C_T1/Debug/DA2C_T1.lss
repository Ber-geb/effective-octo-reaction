
DA2C_T1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000150  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000000fc  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  00000150  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000180  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000020  00000000  00000000  000001c0  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000006a7  00000000  00000000  000001e0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000617  00000000  00000000  00000887  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000002ae  00000000  00000000  00000e9e  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000024  00000000  00000000  0000114c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000033c  00000000  00000000  00001170  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000048  00000000  00000000  000014ac  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000040  00000000  00000000  000014f4  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   8:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  10:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  14:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  18:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  1c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  20:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  24:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  28:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  2c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  30:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  34:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  38:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  3c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  40:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  44:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  48:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  4c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  50:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  54:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  58:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  5c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  60:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  64:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61
  74:	0e 94 40 00 	call	0x80	; 0x80 <main>
  78:	0c 94 7c 00 	jmp	0xf8	; 0xf8 <_exit>

0000007c <__bad_interrupt>:
  7c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000080 <main>:
#include <avr/io.h>


int main(void)
{
    DDRB |= (1<<2);						//PORTB.2 is set as output
  80:	22 9a       	sbi	0x04, 2	; 4
	TCCR0A = 0x40;						//setting timer to normal mode
  82:	80 e4       	ldi	r24, 0x40	; 64
  84:	84 bd       	out	0x24, r24	; 36
	TCCR0B = 0x03;						//setting prescaler to 64
  86:	83 e0       	ldi	r24, 0x03	; 3
  88:	85 bd       	out	0x25, r24	; 37
	TCNT0 = 0;							//reset timer counter
  8a:	16 bc       	out	0x26, r1	; 38
			if (i >= 426){
				/*
				compare increment with 213 (b/c the highest multiple for 255 before it reaches 54374 is 213)
				255*213 = 54315 < 54374
				*/
				OCR0A = 119;						//59 is selected here because 54374-54315 = 59
  8c:	67 e7       	ldi	r22, 0x77	; 119
				TCNT0 = 0;						//reset timer
				TIFR0 = (1<<1);					//clear flag
  8e:	42 e0       	ldi	r20, 0x02	; 2
				while ((TIFR0 & (1<<OCF1A)) == 0); //wait until compare match flag is set	
				TIFR0 |= (1<<1) | (1<<0);		//clear flags
				TCNT0 = 0;						//reset timer
			}
			TIFR0 = (1<<0);						//reset flag
  90:	21 e0       	ldi	r18, 0x01	; 1
			if (i >= 284){
				/*
				compare increment with 142 (b/c the highest multiple for 255 before it reaches 36249 is 142)
				255*142 = 36210 < 36249
				*/
				OCR0A = 79;						//39 is selected here because 36249-36210 = 39
  92:	5f e4       	ldi	r21, 0x4F	; 79
    DDRB |= (1<<2);						//PORTB.2 is set as output
	TCCR0A = 0x40;						//setting timer to normal mode
	TCCR0B = 0x03;						//setting prescaler to 64
	TCNT0 = 0;							//reset timer counter
	while (1){
		PORTB |= (1<<2);				//turn on led
  94:	2a 9a       	sbi	0x05, 2	; 5
		for (int i = 1; i <= 426; i++){
  96:	81 e0       	ldi	r24, 0x01	; 1
  98:	90 e0       	ldi	r25, 0x00	; 0
			while ((TIFR0 & (1<<TOV0)) == 0);	//wait until overflow flag is set		
  9a:	a8 9b       	sbis	0x15, 0	; 21
  9c:	fe cf       	rjmp	.-4      	; 0x9a <main+0x1a>
			if (i >= 426){
  9e:	8a 3a       	cpi	r24, 0xAA	; 170
  a0:	31 e0       	ldi	r19, 0x01	; 1
  a2:	93 07       	cpc	r25, r19
  a4:	4c f0       	brlt	.+18     	; 0xb8 <main+0x38>
				/*
				compare increment with 213 (b/c the highest multiple for 255 before it reaches 54374 is 213)
				255*213 = 54315 < 54374
				*/
				OCR0A = 119;						//59 is selected here because 54374-54315 = 59
  a6:	67 bd       	out	0x27, r22	; 39
				TCNT0 = 0;						//reset timer
  a8:	16 bc       	out	0x26, r1	; 38
				TIFR0 = (1<<1);					//clear flag
  aa:	45 bb       	out	0x15, r20	; 21
				while ((TIFR0 & (1<<OCF1A)) == 0); //wait until compare match flag is set	
  ac:	a9 9b       	sbis	0x15, 1	; 21
  ae:	fe cf       	rjmp	.-4      	; 0xac <main+0x2c>
				TIFR0 |= (1<<1) | (1<<0);		//clear flags
  b0:	35 b3       	in	r19, 0x15	; 21
  b2:	33 60       	ori	r19, 0x03	; 3
  b4:	35 bb       	out	0x15, r19	; 21
				TCNT0 = 0;						//reset timer
  b6:	16 bc       	out	0x26, r1	; 38
			}
			TIFR0 = (1<<0);						//reset flag
  b8:	25 bb       	out	0x15, r18	; 21
	TCCR0A = 0x40;						//setting timer to normal mode
	TCCR0B = 0x03;						//setting prescaler to 64
	TCNT0 = 0;							//reset timer counter
	while (1){
		PORTB |= (1<<2);				//turn on led
		for (int i = 1; i <= 426; i++){
  ba:	01 96       	adiw	r24, 0x01	; 1
  bc:	8b 3a       	cpi	r24, 0xAB	; 171
  be:	31 e0       	ldi	r19, 0x01	; 1
  c0:	93 07       	cpc	r25, r19
  c2:	59 f7       	brne	.-42     	; 0x9a <main+0x1a>
				TIFR0 |= (1<<1) | (1<<0);		//clear flags
				TCNT0 = 0;						//reset timer
			}
			TIFR0 = (1<<0);						//reset flag
		}
		PORTB &= (0<<2);				//turn off led
  c4:	85 b1       	in	r24, 0x05	; 5
  c6:	15 b8       	out	0x05, r1	; 5
		for (int i = 1; i <= 284; i++){
  c8:	81 e0       	ldi	r24, 0x01	; 1
  ca:	90 e0       	ldi	r25, 0x00	; 0
			while ((TIFR0 & (1<<TOV0)) == 0);	//wait until overflow flag is set		
  cc:	a8 9b       	sbis	0x15, 0	; 21
  ce:	fe cf       	rjmp	.-4      	; 0xcc <main+0x4c>
			if (i >= 284){
  d0:	8c 31       	cpi	r24, 0x1C	; 28
  d2:	31 e0       	ldi	r19, 0x01	; 1
  d4:	93 07       	cpc	r25, r19
  d6:	4c f0       	brlt	.+18     	; 0xea <main+0x6a>
				/*
				compare increment with 142 (b/c the highest multiple for 255 before it reaches 36249 is 142)
				255*142 = 36210 < 36249
				*/
				OCR0A = 79;						//39 is selected here because 36249-36210 = 39
  d8:	57 bd       	out	0x27, r21	; 39
				TCNT0 = 0;						//reset timer
  da:	16 bc       	out	0x26, r1	; 38
				TIFR0 = (1<<1);					//clear flag
  dc:	45 bb       	out	0x15, r20	; 21
				while ((TIFR0 & (1<<OCF1A)) == 0); //wait until compare match flag is set	
  de:	a9 9b       	sbis	0x15, 1	; 21
  e0:	fe cf       	rjmp	.-4      	; 0xde <main+0x5e>
				TIFR0 |= (1<<1) | (1<<0);		//clear flags
  e2:	35 b3       	in	r19, 0x15	; 21
  e4:	33 60       	ori	r19, 0x03	; 3
  e6:	35 bb       	out	0x15, r19	; 21
				TCNT0 = 0;						//reset timer
  e8:	16 bc       	out	0x26, r1	; 38
			}
			TIFR0 = (1<<0);						//reset flag
  ea:	25 bb       	out	0x15, r18	; 21
				TCNT0 = 0;						//reset timer
			}
			TIFR0 = (1<<0);						//reset flag
		}
		PORTB &= (0<<2);				//turn off led
		for (int i = 1; i <= 284; i++){
  ec:	01 96       	adiw	r24, 0x01	; 1
  ee:	8d 31       	cpi	r24, 0x1D	; 29
  f0:	31 e0       	ldi	r19, 0x01	; 1
  f2:	93 07       	cpc	r25, r19
  f4:	59 f7       	brne	.-42     	; 0xcc <main+0x4c>
  f6:	ce cf       	rjmp	.-100    	; 0x94 <main+0x14>

000000f8 <_exit>:
  f8:	f8 94       	cli

000000fa <__stop_program>:
  fa:	ff cf       	rjmp	.-2      	; 0xfa <__stop_program>
