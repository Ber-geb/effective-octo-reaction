
DA2C_CT3_AT1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  0000019a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000126  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000004  00800100  00800100  0000019a  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000019a  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000001cc  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000028  00000000  00000000  0000020c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000006b9  00000000  00000000  00000234  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000626  00000000  00000000  000008ed  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000238  00000000  00000000  00000f13  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000048  00000000  00000000  0000114c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000035b  00000000  00000000  00001194  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000049  00000000  00000000  000014ef  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000018  00000000  00000000  00001538  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   8:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  10:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  14:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  18:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  1c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  20:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  24:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  28:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  2c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  30:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  34:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  38:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__vector_14>
  3c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  40:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  44:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  48:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  4c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  50:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  54:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  58:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  5c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  60:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  64:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_clear_bss>:
  74:	21 e0       	ldi	r18, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	01 c0       	rjmp	.+2      	; 0x7e <.do_clear_bss_start>

0000007c <.do_clear_bss_loop>:
  7c:	1d 92       	st	X+, r1

0000007e <.do_clear_bss_start>:
  7e:	a4 30       	cpi	r26, 0x04	; 4
  80:	b2 07       	cpc	r27, r18
  82:	e1 f7       	brne	.-8      	; 0x7c <.do_clear_bss_loop>
  84:	0e 94 48 00 	call	0x90	; 0x90 <main>
  88:	0c 94 91 00 	jmp	0x122	; 0x122 <_exit>

0000008c <__bad_interrupt>:
  8c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000090 <main>:
static volatile int count0 = 0;
static volatile int count1 = 0;

int main(void)
{
   DDRB |= (1<<2);					//set PB2 at output
  90:	22 9a       	sbi	0x04, 2	; 4
   OCR0A = 0xFF;
  92:	8f ef       	ldi	r24, 0xFF	; 255
  94:	87 bd       	out	0x27, r24	; 39
   TCCR0A |= (1<<WGM01);			//set to CTC mode
  96:	84 b5       	in	r24, 0x24	; 36
  98:	82 60       	ori	r24, 0x02	; 2
  9a:	84 bd       	out	0x24, r24	; 36
   TIMSK0 |= (1<<OCIE0A);			//set interrupt on compare match
  9c:	ee e6       	ldi	r30, 0x6E	; 110
  9e:	f0 e0       	ldi	r31, 0x00	; 0
  a0:	80 81       	ld	r24, Z
  a2:	82 60       	ori	r24, 0x02	; 2
  a4:	80 83       	st	Z, r24
   TCCR0B |= (1<<CS02) | (1<<CS00);	//set prescaler to 1024
  a6:	85 b5       	in	r24, 0x25	; 37
  a8:	85 60       	ori	r24, 0x05	; 5
  aa:	85 bd       	out	0x25, r24	; 37
   sei();							//enable global interrupts
  ac:	78 94       	sei
  ae:	ff cf       	rjmp	.-2      	; 0xae <main+0x1e>

000000b0 <__vector_14>:
   while(1){
	   //main loop
   }
}

ISR (TIMER0_COMPA_vect){
  b0:	1f 92       	push	r1
  b2:	0f 92       	push	r0
  b4:	0f b6       	in	r0, 0x3f	; 63
  b6:	0f 92       	push	r0
  b8:	11 24       	eor	r1, r1
  ba:	8f 93       	push	r24
  bc:	9f 93       	push	r25
	if (count0 == 27){
  be:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <count0>
  c2:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <count0+0x1>
  c6:	4b 97       	sbiw	r24, 0x1b	; 27
  c8:	e1 f4       	brne	.+56     	; 0x102 <__vector_14+0x52>
		PORTB &= (0<<2);			//turn off led
  ca:	85 b1       	in	r24, 0x05	; 5
  cc:	15 b8       	out	0x05, r1	; 5
		if (count1 == 18){
  ce:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
  d2:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <_edata+0x1>
  d6:	42 97       	sbiw	r24, 0x12	; 18
  d8:	51 f4       	brne	.+20     	; 0xee <__vector_14+0x3e>
			PORTB |= (1<<2);		//turn on led
  da:	2a 9a       	sbi	0x05, 2	; 5
			count1 = 0;
  dc:	10 92 01 01 	sts	0x0101, r1	; 0x800101 <_edata+0x1>
  e0:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <_edata>
			count0 = 0;
  e4:	10 92 03 01 	sts	0x0103, r1	; 0x800103 <count0+0x1>
  e8:	10 92 02 01 	sts	0x0102, r1	; 0x800102 <count0>
  ec:	13 c0       	rjmp	.+38     	; 0x114 <__vector_14+0x64>
		}
		else
			count1++;
  ee:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
  f2:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <_edata+0x1>
  f6:	01 96       	adiw	r24, 0x01	; 1
  f8:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <_edata+0x1>
  fc:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <_edata>
 100:	09 c0       	rjmp	.+18     	; 0x114 <__vector_14+0x64>
	}
	else
		count0++;
 102:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <count0>
 106:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <count0+0x1>
 10a:	01 96       	adiw	r24, 0x01	; 1
 10c:	90 93 03 01 	sts	0x0103, r25	; 0x800103 <count0+0x1>
 110:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <count0>
	
}
 114:	9f 91       	pop	r25
 116:	8f 91       	pop	r24
 118:	0f 90       	pop	r0
 11a:	0f be       	out	0x3f, r0	; 63
 11c:	0f 90       	pop	r0
 11e:	1f 90       	pop	r1
 120:	18 95       	reti

00000122 <_exit>:
 122:	f8 94       	cli

00000124 <__stop_program>:
 124:	ff cf       	rjmp	.-2      	; 0x124 <__stop_program>
