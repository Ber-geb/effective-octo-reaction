
Task2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  000001fa  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000001a6  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  000001fa  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000022c  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000020  00000000  00000000  0000026c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000007b5  00000000  00000000  0000028c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000068a  00000000  00000000  00000a41  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000313  00000000  00000000  000010cb  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000024  00000000  00000000  000013e0  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000038e  00000000  00000000  00001404  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000000d8  00000000  00000000  00001792  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000010  00000000  00000000  0000186a  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   8:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  10:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  14:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  18:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  1c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  20:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  24:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  28:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  2c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  30:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  34:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  38:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  3c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  40:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  44:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  48:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  4c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  50:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  54:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  58:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  5c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  60:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  64:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61
  74:	0e 94 40 00 	call	0x80	; 0x80 <main>
  78:	0c 94 d1 00 	jmp	0x1a2	; 0x1a2 <_exit>

0000007c <__bad_interrupt>:
  7c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000080 <main>:
#include <avr/interrupt.h>

int main(void)
{
	//Configure TIMER1
	TCCR1A|=(1<<COM1A1)|(1<<COM1B1)|(1<<WGM11); //NON Inverted PWM
  80:	e0 e8       	ldi	r30, 0x80	; 128
  82:	f0 e0       	ldi	r31, 0x00	; 0
  84:	80 81       	ld	r24, Z
  86:	82 6a       	ori	r24, 0xA2	; 162
  88:	80 83       	st	Z, r24
	//PRESCALER=64 MODE 14(FAST PWM)
	TCCR1B|=(1<<WGM13)|(1<<WGM12)|(1<<CS11)|(1<<CS10);
  8a:	e1 e8       	ldi	r30, 0x81	; 129
  8c:	f0 e0       	ldi	r31, 0x00	; 0
  8e:	80 81       	ld	r24, Z
  90:	8b 61       	ori	r24, 0x1B	; 27
  92:	80 83       	st	Z, r24
	ICR1=4999; //fPWM=50Hz (Period = 20ms Standard).
  94:	87 e8       	ldi	r24, 0x87	; 135
  96:	93 e1       	ldi	r25, 0x13	; 19
  98:	90 93 87 00 	sts	0x0087, r25	; 0x800087 <__TEXT_REGION_LENGTH__+0x7e0087>
  9c:	80 93 86 00 	sts	0x0086, r24	; 0x800086 <__TEXT_REGION_LENGTH__+0x7e0086>
	DDRB|=(1<<DDB1); //PWM Pins as Out
  a0:	21 9a       	sbi	0x04, 1	; 4
	
	ADCSRA= 0x83;//make ADC enable and select ck/128
  a2:	83 e8       	ldi	r24, 0x83	; 131
  a4:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
	ADMUX= 0xC0;//1.1V Vref, ADC0, right-justified
  a8:	80 ec       	ldi	r24, 0xC0	; 192
  aa:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7e007c>
	
	while(1)
	{
		ADCSRA|=(1<<ADSC);//start conversion
  ae:	ea e7       	ldi	r30, 0x7A	; 122
  b0:	f0 e0       	ldi	r31, 0x00	; 0
		while((ADCSRA&(1<<ADIF))==0);//wait for conversion to finish
		ADCSRA |= (1<<ADIF); //reset flag
		
		if (ADC >= 0 && ADC <= 100){
  b2:	a8 e7       	ldi	r26, 0x78	; 120
  b4:	b0 e0       	ldi	r27, 0x00	; 0
			OCR1A=425; //135 degree
			_delay_ms(1000);
		}
		//Wait();
		else if (ADC > 682 && ADC <= 1023){
			OCR1A=535; //180 degree
  b6:	c8 e8       	ldi	r28, 0x88	; 136
  b8:	d0 e0       	ldi	r29, 0x00	; 0
  ba:	0f 2e       	mov	r0, r31
  bc:	f7 e1       	ldi	r31, 0x17	; 23
  be:	ef 2e       	mov	r14, r31
  c0:	f2 e0       	ldi	r31, 0x02	; 2
  c2:	ff 2e       	mov	r15, r31
  c4:	f0 2d       	mov	r31, r0
			OCR1A=316; //90 degree
			_delay_ms(1000);
		}
		//Wait();
		else if (ADC > 341 && ADC <= 682){
			OCR1A=425; //135 degree
  c6:	69 ea       	ldi	r22, 0xA9	; 169
  c8:	71 e0       	ldi	r23, 0x01	; 1
			OCR1A=97; //0 degree
			_delay_ms(1000);
		}
		//Wait();
		else if (ADC > 100 && ADC <= 341){
			OCR1A=316; //90 degree
  ca:	4c e3       	ldi	r20, 0x3C	; 60
  cc:	51 e0       	ldi	r21, 0x01	; 1
		ADCSRA|=(1<<ADSC);//start conversion
		while((ADCSRA&(1<<ADIF))==0);//wait for conversion to finish
		ADCSRA |= (1<<ADIF); //reset flag
		
		if (ADC >= 0 && ADC <= 100){
			OCR1A=97; //0 degree
  ce:	21 e6       	ldi	r18, 0x61	; 97
  d0:	30 e0       	ldi	r19, 0x00	; 0
	ADCSRA= 0x83;//make ADC enable and select ck/128
	ADMUX= 0xC0;//1.1V Vref, ADC0, right-justified
	
	while(1)
	{
		ADCSRA|=(1<<ADSC);//start conversion
  d2:	80 81       	ld	r24, Z
  d4:	80 64       	ori	r24, 0x40	; 64
  d6:	80 83       	st	Z, r24
		while((ADCSRA&(1<<ADIF))==0);//wait for conversion to finish
  d8:	80 81       	ld	r24, Z
  da:	84 ff       	sbrs	r24, 4
  dc:	fd cf       	rjmp	.-6      	; 0xd8 <main+0x58>
		ADCSRA |= (1<<ADIF); //reset flag
  de:	80 81       	ld	r24, Z
  e0:	80 61       	ori	r24, 0x10	; 16
  e2:	80 83       	st	Z, r24
		
		if (ADC >= 0 && ADC <= 100){
  e4:	8d 91       	ld	r24, X+
  e6:	9c 91       	ld	r25, X
  e8:	11 97       	sbiw	r26, 0x01	; 1
  ea:	8d 91       	ld	r24, X+
  ec:	9c 91       	ld	r25, X
  ee:	11 97       	sbiw	r26, 0x01	; 1
  f0:	85 36       	cpi	r24, 0x65	; 101
  f2:	91 05       	cpc	r25, r1
  f4:	60 f4       	brcc	.+24     	; 0x10e <main+0x8e>
			OCR1A=97; //0 degree
  f6:	39 83       	std	Y+1, r19	; 0x01
  f8:	28 83       	st	Y, r18
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  fa:	1f ef       	ldi	r17, 0xFF	; 255
  fc:	83 ed       	ldi	r24, 0xD3	; 211
  fe:	90 e3       	ldi	r25, 0x30	; 48
 100:	11 50       	subi	r17, 0x01	; 1
 102:	80 40       	sbci	r24, 0x00	; 0
 104:	90 40       	sbci	r25, 0x00	; 0
 106:	e1 f7       	brne	.-8      	; 0x100 <main+0x80>
 108:	00 c0       	rjmp	.+0      	; 0x10a <main+0x8a>
 10a:	00 00       	nop
 10c:	e2 cf       	rjmp	.-60     	; 0xd2 <main+0x52>
			_delay_ms(1000);
		}
		//Wait();
		else if (ADC > 100 && ADC <= 341){
 10e:	8d 91       	ld	r24, X+
 110:	9c 91       	ld	r25, X
 112:	11 97       	sbiw	r26, 0x01	; 1
 114:	85 36       	cpi	r24, 0x65	; 101
 116:	91 05       	cpc	r25, r1
 118:	90 f0       	brcs	.+36     	; 0x13e <main+0xbe>
 11a:	8d 91       	ld	r24, X+
 11c:	9c 91       	ld	r25, X
 11e:	11 97       	sbiw	r26, 0x01	; 1
 120:	86 35       	cpi	r24, 0x56	; 86
 122:	91 40       	sbci	r25, 0x01	; 1
 124:	60 f4       	brcc	.+24     	; 0x13e <main+0xbe>
			OCR1A=316; //90 degree
 126:	59 83       	std	Y+1, r21	; 0x01
 128:	48 83       	st	Y, r20
 12a:	8f ef       	ldi	r24, 0xFF	; 255
 12c:	93 ed       	ldi	r25, 0xD3	; 211
 12e:	10 e3       	ldi	r17, 0x30	; 48
 130:	81 50       	subi	r24, 0x01	; 1
 132:	90 40       	sbci	r25, 0x00	; 0
 134:	10 40       	sbci	r17, 0x00	; 0
 136:	e1 f7       	brne	.-8      	; 0x130 <main+0xb0>
 138:	00 c0       	rjmp	.+0      	; 0x13a <main+0xba>
 13a:	00 00       	nop
 13c:	ca cf       	rjmp	.-108    	; 0xd2 <main+0x52>
			_delay_ms(1000);
		}
		//Wait();
		else if (ADC > 341 && ADC <= 682){
 13e:	8d 91       	ld	r24, X+
 140:	9c 91       	ld	r25, X
 142:	11 97       	sbiw	r26, 0x01	; 1
 144:	86 35       	cpi	r24, 0x56	; 86
 146:	91 40       	sbci	r25, 0x01	; 1
 148:	90 f0       	brcs	.+36     	; 0x16e <main+0xee>
 14a:	8d 91       	ld	r24, X+
 14c:	9c 91       	ld	r25, X
 14e:	11 97       	sbiw	r26, 0x01	; 1
 150:	8b 3a       	cpi	r24, 0xAB	; 171
 152:	92 40       	sbci	r25, 0x02	; 2
 154:	60 f4       	brcc	.+24     	; 0x16e <main+0xee>
			OCR1A=425; //135 degree
 156:	79 83       	std	Y+1, r23	; 0x01
 158:	68 83       	st	Y, r22
 15a:	8f ef       	ldi	r24, 0xFF	; 255
 15c:	93 ed       	ldi	r25, 0xD3	; 211
 15e:	10 e3       	ldi	r17, 0x30	; 48
 160:	81 50       	subi	r24, 0x01	; 1
 162:	90 40       	sbci	r25, 0x00	; 0
 164:	10 40       	sbci	r17, 0x00	; 0
 166:	e1 f7       	brne	.-8      	; 0x160 <main+0xe0>
 168:	00 c0       	rjmp	.+0      	; 0x16a <main+0xea>
 16a:	00 00       	nop
 16c:	b2 cf       	rjmp	.-156    	; 0xd2 <main+0x52>
			_delay_ms(1000);
		}
		//Wait();
		else if (ADC > 682 && ADC <= 1023){
 16e:	8d 91       	ld	r24, X+
 170:	9c 91       	ld	r25, X
 172:	11 97       	sbiw	r26, 0x01	; 1
 174:	8b 3a       	cpi	r24, 0xAB	; 171
 176:	92 40       	sbci	r25, 0x02	; 2
 178:	08 f4       	brcc	.+2      	; 0x17c <main+0xfc>
 17a:	ab cf       	rjmp	.-170    	; 0xd2 <main+0x52>
 17c:	8d 91       	ld	r24, X+
 17e:	9c 91       	ld	r25, X
 180:	11 97       	sbiw	r26, 0x01	; 1
 182:	81 15       	cp	r24, r1
 184:	94 40       	sbci	r25, 0x04	; 4
 186:	08 f0       	brcs	.+2      	; 0x18a <main+0x10a>
 188:	a4 cf       	rjmp	.-184    	; 0xd2 <main+0x52>
			OCR1A=535; //180 degree
 18a:	f9 82       	std	Y+1, r15	; 0x01
 18c:	e8 82       	st	Y, r14
 18e:	8f ef       	ldi	r24, 0xFF	; 255
 190:	93 ed       	ldi	r25, 0xD3	; 211
 192:	10 e3       	ldi	r17, 0x30	; 48
 194:	81 50       	subi	r24, 0x01	; 1
 196:	90 40       	sbci	r25, 0x00	; 0
 198:	10 40       	sbci	r17, 0x00	; 0
 19a:	e1 f7       	brne	.-8      	; 0x194 <main+0x114>
 19c:	00 c0       	rjmp	.+0      	; 0x19e <main+0x11e>
 19e:	00 00       	nop
 1a0:	98 cf       	rjmp	.-208    	; 0xd2 <main+0x52>

000001a2 <_exit>:
 1a2:	f8 94       	cli

000001a4 <__stop_program>:
 1a4:	ff cf       	rjmp	.-2      	; 0x1a4 <__stop_program>
