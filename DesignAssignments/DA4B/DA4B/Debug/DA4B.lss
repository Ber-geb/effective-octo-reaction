
DA4B.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  0000023a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000001c6  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000001  00800100  00800100  0000023a  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000023a  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000026c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000028  00000000  00000000  000002ac  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000006af  00000000  00000000  000002d4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000621  00000000  00000000  00000983  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000002e4  00000000  00000000  00000fa4  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000044  00000000  00000000  00001288  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000354  00000000  00000000  000012cc  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000003c  00000000  00000000  00001620  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000018  00000000  00000000  0000165c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   8:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  10:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  14:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  18:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  1c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  20:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  24:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  28:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  2c:	0c 94 af 00 	jmp	0x15e	; 0x15e <__vector_11>
  30:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  34:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  38:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  3c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  40:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  44:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  48:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  4c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  50:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  54:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  58:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  5c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  60:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  64:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_clear_bss>:
  74:	21 e0       	ldi	r18, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	01 c0       	rjmp	.+2      	; 0x7e <.do_clear_bss_start>

0000007c <.do_clear_bss_loop>:
  7c:	1d 92       	st	X+, r1

0000007e <.do_clear_bss_start>:
  7e:	a1 30       	cpi	r26, 0x01	; 1
  80:	b2 07       	cpc	r27, r18
  82:	e1 f7       	brne	.-8      	; 0x7c <.do_clear_bss_loop>
  84:	0e 94 48 00 	call	0x90	; 0x90 <main>
  88:	0c 94 e1 00 	jmp	0x1c2	; 0x1c2 <_exit>

0000008c <__bad_interrupt>:
  8c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000090 <main>:
uint8_t count = 0;

int main(void)
{
	
	TCCR1B |= (1<<WGM12) | (1<<CS11) | (1<<CS10); //CTC mode and prescaler = 64
  90:	e1 e8       	ldi	r30, 0x81	; 129
  92:	f0 e0       	ldi	r31, 0x00	; 0
  94:	80 81       	ld	r24, Z
  96:	8b 60       	ori	r24, 0x0B	; 11
  98:	80 83       	st	Z, r24
	TIMSK1 |= (1<<OCIE1A);
  9a:	ef e6       	ldi	r30, 0x6F	; 111
  9c:	f0 e0       	ldi	r31, 0x00	; 0
  9e:	80 81       	ld	r24, Z
  a0:	82 60       	ori	r24, 0x02	; 2
  a2:	80 83       	st	Z, r24
	sei();
  a4:	78 94       	sei
	
	PCICR |= (1<<PCIE1); // enables PCINT 14..8
  a6:	e8 e6       	ldi	r30, 0x68	; 104
  a8:	f0 e0       	ldi	r31, 0x00	; 0
  aa:	80 81       	ld	r24, Z
  ac:	82 60       	ori	r24, 0x02	; 2
  ae:	80 83       	st	Z, r24
	PCIFR |= (1<<PCIF1);
  b0:	d9 9a       	sbi	0x1b, 1	; 27
	PCMSK1 |= (1<<PCINT9); //enables pc interrupt 9 (PC1)
  b2:	ec e6       	ldi	r30, 0x6C	; 108
  b4:	f0 e0       	ldi	r31, 0x00	; 0
  b6:	80 81       	ld	r24, Z
  b8:	82 60       	ori	r24, 0x02	; 2
  ba:	80 83       	st	Z, r24
	ADCSRA= 0x83;//make ADC enable and select ck/128
  bc:	83 e8       	ldi	r24, 0x83	; 131
  be:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
	ADMUX= 0xC0;//1.1V Vref, ADC0, right-justified
  c2:	80 ec       	ldi	r24, 0xC0	; 192
  c4:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7e007c>
	
	//int period;
	DDRD = 0x0F;/* Make PORTD lower pins as output */
  c8:	8f e0       	ldi	r24, 0x0F	; 15
  ca:	8a b9       	out	0x0a, r24	; 10
	//period = 100;/* Set period in between two steps */
	while (1)
	{
		
		ADCSRA|=(1<<ADSC);//start conversion
  cc:	ea e7       	ldi	r30, 0x7A	; 122
  ce:	f0 e0       	ldi	r31, 0x00	; 0
		while((ADCSRA&(1<<ADIF))==0);//wait for conversion to finish
		ADCSRA |= (1<<ADIF); //reset flag
		
		if (ADC == 0)
  d0:	a8 e7       	ldi	r26, 0x78	; 120
  d2:	b0 e0       	ldi	r27, 0x00	; 0
		else if (ADC > 0 && ADC <=500)
			OCR1A = 24999; //100 ms
		else if  (ADC > 500 && ADC <= 1000)
			OCR1A = 37499; //150 ms
		else if (ADC > 1000)
			OCR1A = 49999; //200 ms
  d4:	c8 e8       	ldi	r28, 0x88	; 136
  d6:	d0 e0       	ldi	r29, 0x00	; 0
  d8:	4f e4       	ldi	r20, 0x4F	; 79
  da:	53 ec       	ldi	r21, 0xC3	; 195
		if (ADC == 0)
			OCR1A = 12499; //50 ms
		else if (ADC > 0 && ADC <=500)
			OCR1A = 24999; //100 ms
		else if  (ADC > 500 && ADC <= 1000)
			OCR1A = 37499; //150 ms
  dc:	0f 2e       	mov	r0, r31
  de:	fb e7       	ldi	r31, 0x7B	; 123
  e0:	ef 2e       	mov	r14, r31
  e2:	f2 e9       	ldi	r31, 0x92	; 146
  e4:	ff 2e       	mov	r15, r31
  e6:	f0 2d       	mov	r31, r0
		ADCSRA |= (1<<ADIF); //reset flag
		
		if (ADC == 0)
			OCR1A = 12499; //50 ms
		else if (ADC > 0 && ADC <=500)
			OCR1A = 24999; //100 ms
  e8:	67 ea       	ldi	r22, 0xA7	; 167
  ea:	71 e6       	ldi	r23, 0x61	; 97
		ADCSRA|=(1<<ADSC);//start conversion
		while((ADCSRA&(1<<ADIF))==0);//wait for conversion to finish
		ADCSRA |= (1<<ADIF); //reset flag
		
		if (ADC == 0)
			OCR1A = 12499; //50 ms
  ec:	23 ed       	ldi	r18, 0xD3	; 211
  ee:	30 e3       	ldi	r19, 0x30	; 48
	DDRD = 0x0F;/* Make PORTD lower pins as output */
	//period = 100;/* Set period in between two steps */
	while (1)
	{
		
		ADCSRA|=(1<<ADSC);//start conversion
  f0:	80 81       	ld	r24, Z
  f2:	80 64       	ori	r24, 0x40	; 64
  f4:	80 83       	st	Z, r24
		while((ADCSRA&(1<<ADIF))==0);//wait for conversion to finish
  f6:	80 81       	ld	r24, Z
  f8:	84 ff       	sbrs	r24, 4
  fa:	fd cf       	rjmp	.-6      	; 0xf6 <main+0x66>
		ADCSRA |= (1<<ADIF); //reset flag
  fc:	80 81       	ld	r24, Z
  fe:	80 61       	ori	r24, 0x10	; 16
 100:	80 83       	st	Z, r24
		
		if (ADC == 0)
 102:	8d 91       	ld	r24, X+
 104:	9c 91       	ld	r25, X
 106:	11 97       	sbiw	r26, 0x01	; 1
 108:	89 2b       	or	r24, r25
 10a:	19 f4       	brne	.+6      	; 0x112 <main+0x82>
			OCR1A = 12499; //50 ms
 10c:	39 83       	std	Y+1, r19	; 0x01
 10e:	28 83       	st	Y, r18
 110:	ef cf       	rjmp	.-34     	; 0xf0 <main+0x60>
		else if (ADC > 0 && ADC <=500)
 112:	8d 91       	ld	r24, X+
 114:	9c 91       	ld	r25, X
 116:	11 97       	sbiw	r26, 0x01	; 1
 118:	89 2b       	or	r24, r25
 11a:	49 f0       	breq	.+18     	; 0x12e <main+0x9e>
 11c:	8d 91       	ld	r24, X+
 11e:	9c 91       	ld	r25, X
 120:	11 97       	sbiw	r26, 0x01	; 1
 122:	85 3f       	cpi	r24, 0xF5	; 245
 124:	91 40       	sbci	r25, 0x01	; 1
 126:	18 f4       	brcc	.+6      	; 0x12e <main+0x9e>
			OCR1A = 24999; //100 ms
 128:	79 83       	std	Y+1, r23	; 0x01
 12a:	68 83       	st	Y, r22
 12c:	e1 cf       	rjmp	.-62     	; 0xf0 <main+0x60>
		else if  (ADC > 500 && ADC <= 1000)
 12e:	8d 91       	ld	r24, X+
 130:	9c 91       	ld	r25, X
 132:	11 97       	sbiw	r26, 0x01	; 1
 134:	85 3f       	cpi	r24, 0xF5	; 245
 136:	91 40       	sbci	r25, 0x01	; 1
 138:	48 f0       	brcs	.+18     	; 0x14c <main+0xbc>
 13a:	8d 91       	ld	r24, X+
 13c:	9c 91       	ld	r25, X
 13e:	11 97       	sbiw	r26, 0x01	; 1
 140:	89 3e       	cpi	r24, 0xE9	; 233
 142:	93 40       	sbci	r25, 0x03	; 3
 144:	18 f4       	brcc	.+6      	; 0x14c <main+0xbc>
			OCR1A = 37499; //150 ms
 146:	f9 82       	std	Y+1, r15	; 0x01
 148:	e8 82       	st	Y, r14
 14a:	d2 cf       	rjmp	.-92     	; 0xf0 <main+0x60>
		else if (ADC > 1000)
 14c:	8d 91       	ld	r24, X+
 14e:	9c 91       	ld	r25, X
 150:	11 97       	sbiw	r26, 0x01	; 1
 152:	89 3e       	cpi	r24, 0xE9	; 233
 154:	93 40       	sbci	r25, 0x03	; 3
 156:	60 f2       	brcs	.-104    	; 0xf0 <main+0x60>
			OCR1A = 49999; //200 ms
 158:	59 83       	std	Y+1, r21	; 0x01
 15a:	48 83       	st	Y, r20
 15c:	c9 cf       	rjmp	.-110    	; 0xf0 <main+0x60>

0000015e <__vector_11>:
	*/
	}
	
}

ISR (TIMER1_COMPA_vect){
 15e:	1f 92       	push	r1
 160:	0f 92       	push	r0
 162:	0f b6       	in	r0, 0x3f	; 63
 164:	0f 92       	push	r0
 166:	11 24       	eor	r1, r1
 168:	8f 93       	push	r24
	
	
	if (count == 0){
 16a:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
 16e:	81 11       	cpse	r24, r1
 170:	08 c0       	rjmp	.+16     	; 0x182 <__vector_11+0x24>
		PORTD = 0x09;
 172:	89 e0       	ldi	r24, 0x09	; 9
 174:	8b b9       	out	0x0b, r24	; 11
		count++;
 176:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
 17a:	8f 5f       	subi	r24, 0xFF	; 255
 17c:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <_edata>
 180:	1a c0       	rjmp	.+52     	; 0x1b6 <__vector_11+0x58>
	}
	else if (count == 1){
 182:	81 30       	cpi	r24, 0x01	; 1
 184:	41 f4       	brne	.+16     	; 0x196 <__vector_11+0x38>
		PORTD = 0x03;
 186:	83 e0       	ldi	r24, 0x03	; 3
 188:	8b b9       	out	0x0b, r24	; 11
		count++;
 18a:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
 18e:	8f 5f       	subi	r24, 0xFF	; 255
 190:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <_edata>
 194:	10 c0       	rjmp	.+32     	; 0x1b6 <__vector_11+0x58>
	}
	else if (count == 2){
 196:	82 30       	cpi	r24, 0x02	; 2
 198:	41 f4       	brne	.+16     	; 0x1aa <__vector_11+0x4c>
		PORTD = 0x06;
 19a:	86 e0       	ldi	r24, 0x06	; 6
 19c:	8b b9       	out	0x0b, r24	; 11
		count++;
 19e:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
 1a2:	8f 5f       	subi	r24, 0xFF	; 255
 1a4:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <_edata>
 1a8:	06 c0       	rjmp	.+12     	; 0x1b6 <__vector_11+0x58>
	}
	else if (count >= 3){
 1aa:	83 30       	cpi	r24, 0x03	; 3
 1ac:	20 f0       	brcs	.+8      	; 0x1b6 <__vector_11+0x58>
		PORTD = 0x0C;
 1ae:	8c e0       	ldi	r24, 0x0C	; 12
 1b0:	8b b9       	out	0x0b, r24	; 11
		count=0;
 1b2:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <_edata>
	}
	
}
 1b6:	8f 91       	pop	r24
 1b8:	0f 90       	pop	r0
 1ba:	0f be       	out	0x3f, r0	; 63
 1bc:	0f 90       	pop	r0
 1be:	1f 90       	pop	r1
 1c0:	18 95       	reti

000001c2 <_exit>:
 1c2:	f8 94       	cli

000001c4 <__stop_program>:
 1c4:	ff cf       	rjmp	.-2      	; 0x1c4 <__stop_program>
