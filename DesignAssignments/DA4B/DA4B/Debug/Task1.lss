
Task1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000224  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000001b0  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000001  00800100  00800100  00000224  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000224  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000254  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000028  00000000  00000000  00000294  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000006af  00000000  00000000  000002bc  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000621  00000000  00000000  0000096b  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000002d2  00000000  00000000  00000f8c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000044  00000000  00000000  00001260  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000354  00000000  00000000  000012a4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000003c  00000000  00000000  000015f8  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000018  00000000  00000000  00001634  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   8:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  10:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  14:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  18:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  1c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  20:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  24:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  28:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  2c:	0c 94 a4 00 	jmp	0x148	; 0x148 <__vector_11>
  30:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  34:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  38:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  3c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  40:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  44:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  48:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  4c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  50:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  54:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  58:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  5c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  60:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  64:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_clear_bss>:
  74:	21 e0       	ldi	r18, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	01 c0       	rjmp	.+2      	; 0x7e <.do_clear_bss_start>

0000007c <.do_clear_bss_loop>:
  7c:	1d 92       	st	X+, r1

0000007e <.do_clear_bss_start>:
  7e:	a1 30       	cpi	r26, 0x01	; 1
  80:	b2 07       	cpc	r27, r18
  82:	e1 f7       	brne	.-8      	; 0x7c <.do_clear_bss_loop>
  84:	0e 94 48 00 	call	0x90	; 0x90 <main>
  88:	0c 94 d6 00 	jmp	0x1ac	; 0x1ac <_exit>

0000008c <__bad_interrupt>:
  8c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000090 <main>:
uint8_t count = 0;

int main(void)
{
	
	TCCR1B |= (1<<WGM12) | (1<<CS11) | (1<<CS10); //CTC mode and prescaler = 64
  90:	e1 e8       	ldi	r30, 0x81	; 129
  92:	f0 e0       	ldi	r31, 0x00	; 0
  94:	80 81       	ld	r24, Z
  96:	8b 60       	ori	r24, 0x0B	; 11
  98:	80 83       	st	Z, r24
	TIMSK1 |= (1<<OCIE1A);
  9a:	ef e6       	ldi	r30, 0x6F	; 111
  9c:	f0 e0       	ldi	r31, 0x00	; 0
  9e:	80 81       	ld	r24, Z
  a0:	82 60       	ori	r24, 0x02	; 2
  a2:	80 83       	st	Z, r24
	sei();
  a4:	78 94       	sei
	
	ADCSRA= 0x83;//make ADC enable and select ck/128
  a6:	83 e8       	ldi	r24, 0x83	; 131
  a8:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
	ADMUX= 0xC0;//1.1V Vref, ADC0, right-justified
  ac:	80 ec       	ldi	r24, 0xC0	; 192
  ae:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7e007c>
	
	//int period;
	DDRD = 0x0F;/* Make PORTD lower pins as output */
  b2:	8f e0       	ldi	r24, 0x0F	; 15
  b4:	8a b9       	out	0x0a, r24	; 10
	//period = 100;/* Set period in between two steps */
	while (1)
	{
		
		ADCSRA|=(1<<ADSC);//start conversion
  b6:	ea e7       	ldi	r30, 0x7A	; 122
  b8:	f0 e0       	ldi	r31, 0x00	; 0
		while((ADCSRA&(1<<ADIF))==0);//wait for conversion to finish
		ADCSRA |= (1<<ADIF); //reset flag
		
		if (ADC == 0)
  ba:	a8 e7       	ldi	r26, 0x78	; 120
  bc:	b0 e0       	ldi	r27, 0x00	; 0
		else if (ADC > 0 && ADC <=500)
			OCR1A = 24999; //100 ms
		else if  (ADC > 500 && ADC <= 1000)
			OCR1A = 37499; //150 ms
		else if (ADC > 1000)
			OCR1A = 49999; //200 ms
  be:	c8 e8       	ldi	r28, 0x88	; 136
  c0:	d0 e0       	ldi	r29, 0x00	; 0
  c2:	4f e4       	ldi	r20, 0x4F	; 79
  c4:	53 ec       	ldi	r21, 0xC3	; 195
		if (ADC == 0)
			OCR1A = 12499; //50 ms
		else if (ADC > 0 && ADC <=500)
			OCR1A = 24999; //100 ms
		else if  (ADC > 500 && ADC <= 1000)
			OCR1A = 37499; //150 ms
  c6:	0f 2e       	mov	r0, r31
  c8:	fb e7       	ldi	r31, 0x7B	; 123
  ca:	ef 2e       	mov	r14, r31
  cc:	f2 e9       	ldi	r31, 0x92	; 146
  ce:	ff 2e       	mov	r15, r31
  d0:	f0 2d       	mov	r31, r0
		ADCSRA |= (1<<ADIF); //reset flag
		
		if (ADC == 0)
			OCR1A = 12499; //50 ms
		else if (ADC > 0 && ADC <=500)
			OCR1A = 24999; //100 ms
  d2:	67 ea       	ldi	r22, 0xA7	; 167
  d4:	71 e6       	ldi	r23, 0x61	; 97
		ADCSRA|=(1<<ADSC);//start conversion
		while((ADCSRA&(1<<ADIF))==0);//wait for conversion to finish
		ADCSRA |= (1<<ADIF); //reset flag
		
		if (ADC == 0)
			OCR1A = 12499; //50 ms
  d6:	23 ed       	ldi	r18, 0xD3	; 211
  d8:	30 e3       	ldi	r19, 0x30	; 48
	DDRD = 0x0F;/* Make PORTD lower pins as output */
	//period = 100;/* Set period in between two steps */
	while (1)
	{
		
		ADCSRA|=(1<<ADSC);//start conversion
  da:	80 81       	ld	r24, Z
  dc:	80 64       	ori	r24, 0x40	; 64
  de:	80 83       	st	Z, r24
		while((ADCSRA&(1<<ADIF))==0);//wait for conversion to finish
  e0:	80 81       	ld	r24, Z
  e2:	84 ff       	sbrs	r24, 4
  e4:	fd cf       	rjmp	.-6      	; 0xe0 <main+0x50>
		ADCSRA |= (1<<ADIF); //reset flag
  e6:	80 81       	ld	r24, Z
  e8:	80 61       	ori	r24, 0x10	; 16
  ea:	80 83       	st	Z, r24
		
		if (ADC == 0)
  ec:	8d 91       	ld	r24, X+
  ee:	9c 91       	ld	r25, X
  f0:	11 97       	sbiw	r26, 0x01	; 1
  f2:	89 2b       	or	r24, r25
  f4:	19 f4       	brne	.+6      	; 0xfc <main+0x6c>
			OCR1A = 12499; //50 ms
  f6:	39 83       	std	Y+1, r19	; 0x01
  f8:	28 83       	st	Y, r18
  fa:	ef cf       	rjmp	.-34     	; 0xda <main+0x4a>
		else if (ADC > 0 && ADC <=500)
  fc:	8d 91       	ld	r24, X+
  fe:	9c 91       	ld	r25, X
 100:	11 97       	sbiw	r26, 0x01	; 1
 102:	89 2b       	or	r24, r25
 104:	49 f0       	breq	.+18     	; 0x118 <main+0x88>
 106:	8d 91       	ld	r24, X+
 108:	9c 91       	ld	r25, X
 10a:	11 97       	sbiw	r26, 0x01	; 1
 10c:	85 3f       	cpi	r24, 0xF5	; 245
 10e:	91 40       	sbci	r25, 0x01	; 1
 110:	18 f4       	brcc	.+6      	; 0x118 <main+0x88>
			OCR1A = 24999; //100 ms
 112:	79 83       	std	Y+1, r23	; 0x01
 114:	68 83       	st	Y, r22
 116:	e1 cf       	rjmp	.-62     	; 0xda <main+0x4a>
		else if  (ADC > 500 && ADC <= 1000)
 118:	8d 91       	ld	r24, X+
 11a:	9c 91       	ld	r25, X
 11c:	11 97       	sbiw	r26, 0x01	; 1
 11e:	85 3f       	cpi	r24, 0xF5	; 245
 120:	91 40       	sbci	r25, 0x01	; 1
 122:	48 f0       	brcs	.+18     	; 0x136 <main+0xa6>
 124:	8d 91       	ld	r24, X+
 126:	9c 91       	ld	r25, X
 128:	11 97       	sbiw	r26, 0x01	; 1
 12a:	89 3e       	cpi	r24, 0xE9	; 233
 12c:	93 40       	sbci	r25, 0x03	; 3
 12e:	18 f4       	brcc	.+6      	; 0x136 <main+0xa6>
			OCR1A = 37499; //150 ms
 130:	f9 82       	std	Y+1, r15	; 0x01
 132:	e8 82       	st	Y, r14
 134:	d2 cf       	rjmp	.-92     	; 0xda <main+0x4a>
		else if (ADC > 1000)
 136:	8d 91       	ld	r24, X+
 138:	9c 91       	ld	r25, X
 13a:	11 97       	sbiw	r26, 0x01	; 1
 13c:	89 3e       	cpi	r24, 0xE9	; 233
 13e:	93 40       	sbci	r25, 0x03	; 3
 140:	60 f2       	brcs	.-104    	; 0xda <main+0x4a>
			OCR1A = 49999; //200 ms
 142:	59 83       	std	Y+1, r21	; 0x01
 144:	48 83       	st	Y, r20
 146:	c9 cf       	rjmp	.-110    	; 0xda <main+0x4a>

00000148 <__vector_11>:
	*/
	}
	
}

ISR (TIMER1_COMPA_vect){
 148:	1f 92       	push	r1
 14a:	0f 92       	push	r0
 14c:	0f b6       	in	r0, 0x3f	; 63
 14e:	0f 92       	push	r0
 150:	11 24       	eor	r1, r1
 152:	8f 93       	push	r24
	
	/* Rotate Stepper Motor Anticlockwise with Full step sequence */
	if (count == 0){
 154:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
 158:	81 11       	cpse	r24, r1
 15a:	08 c0       	rjmp	.+16     	; 0x16c <__vector_11+0x24>
		PORTD = 0x09;
 15c:	89 e0       	ldi	r24, 0x09	; 9
 15e:	8b b9       	out	0x0b, r24	; 11
		count++;
 160:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
 164:	8f 5f       	subi	r24, 0xFF	; 255
 166:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <_edata>
 16a:	1a c0       	rjmp	.+52     	; 0x1a0 <__vector_11+0x58>
	}
	else if (count == 1){
 16c:	81 30       	cpi	r24, 0x01	; 1
 16e:	41 f4       	brne	.+16     	; 0x180 <__vector_11+0x38>
		PORTD = 0x03;
 170:	83 e0       	ldi	r24, 0x03	; 3
 172:	8b b9       	out	0x0b, r24	; 11
		count++;
 174:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
 178:	8f 5f       	subi	r24, 0xFF	; 255
 17a:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <_edata>
 17e:	10 c0       	rjmp	.+32     	; 0x1a0 <__vector_11+0x58>
	}
	else if (count == 2){
 180:	82 30       	cpi	r24, 0x02	; 2
 182:	41 f4       	brne	.+16     	; 0x194 <__vector_11+0x4c>
		PORTD = 0x06;
 184:	86 e0       	ldi	r24, 0x06	; 6
 186:	8b b9       	out	0x0b, r24	; 11
		count++;
 188:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
 18c:	8f 5f       	subi	r24, 0xFF	; 255
 18e:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <_edata>
 192:	06 c0       	rjmp	.+12     	; 0x1a0 <__vector_11+0x58>
	}
	else if (count >= 3){
 194:	83 30       	cpi	r24, 0x03	; 3
 196:	20 f0       	brcs	.+8      	; 0x1a0 <__vector_11+0x58>
		PORTD = 0x0C;
 198:	8c e0       	ldi	r24, 0x0C	; 12
 19a:	8b b9       	out	0x0b, r24	; 11
		count=0;
 19c:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <_edata>
	}
	
}
 1a0:	8f 91       	pop	r24
 1a2:	0f 90       	pop	r0
 1a4:	0f be       	out	0x3f, r0	; 63
 1a6:	0f 90       	pop	r0
 1a8:	1f 90       	pop	r1
 1aa:	18 95       	reti

000001ac <_exit>:
 1ac:	f8 94       	cli

000001ae <__stop_program>:
 1ae:	ff cf       	rjmp	.-2      	; 0x1ae <__stop_program>
