
Task_1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  000003ae  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000033a  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000001  00800100  00800100  000003ae  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000003ae  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000003e0  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000028  00000000  00000000  00000420  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000007ae  00000000  00000000  00000448  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000069c  00000000  00000000  00000bf6  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000459  00000000  00000000  00001292  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000050  00000000  00000000  000016ec  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000003a6  00000000  00000000  0000173c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000012e  00000000  00000000  00001ae2  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000018  00000000  00000000  00001c10  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   8:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  10:	0c 94 66 01 	jmp	0x2cc	; 0x2cc <__vector_4>
  14:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  18:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  1c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  20:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  24:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  28:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  2c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  30:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  34:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  38:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  3c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  40:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  44:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  48:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  4c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  50:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  54:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  58:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  5c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  60:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  64:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_clear_bss>:
  74:	21 e0       	ldi	r18, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	01 c0       	rjmp	.+2      	; 0x7e <.do_clear_bss_start>

0000007c <.do_clear_bss_loop>:
  7c:	1d 92       	st	X+, r1

0000007e <.do_clear_bss_start>:
  7e:	a1 30       	cpi	r26, 0x01	; 1
  80:	b2 07       	cpc	r27, r18
  82:	e1 f7       	brne	.-8      	; 0x7c <.do_clear_bss_loop>
  84:	0e 94 48 00 	call	0x90	; 0x90 <main>
  88:	0c 94 9b 01 	jmp	0x336	; 0x336 <_exit>

0000008c <__bad_interrupt>:
  8c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000090 <main>:
	OCR1A = 50;
	//Fast PWM, non-inverted
	TCCR1A |= (1<<COM1A1)|(1<<WGM11)|(1<<WGM10);
	TCCR1B |= (1<<WGM13) | (1<<WGM12) | (1<<CS11); //N = 8
	*/
	DDRD = 0xFF; //port D as output
  90:	8f ef       	ldi	r24, 0xFF	; 255
  92:	8a b9       	out	0x0a, r24	; 10
	PORTD = 0b00000010; //AIN2 = 1 and AIN1 = 0
  94:	82 e0       	ldi	r24, 0x02	; 2
  96:	8b b9       	out	0x0b, r24	; 11
	DDRB |= (1 << DDB1)|(1 << DDB2);
  98:	84 b1       	in	r24, 0x04	; 4
  9a:	86 60       	ori	r24, 0x06	; 6
  9c:	84 b9       	out	0x04, r24	; 4
	// PB1 and PB2 is now an output
	ICR1 = 0xFFFF;
  9e:	8f ef       	ldi	r24, 0xFF	; 255
  a0:	9f ef       	ldi	r25, 0xFF	; 255
  a2:	90 93 87 00 	sts	0x0087, r25	; 0x800087 <__TEXT_REGION_LENGTH__+0x7e0087>
  a6:	80 93 86 00 	sts	0x0086, r24	; 0x800086 <__TEXT_REGION_LENGTH__+0x7e0086>
	// set TOP to 16bit
	TCCR1A |= (1 << COM1A1);
  aa:	e0 e8       	ldi	r30, 0x80	; 128
  ac:	f0 e0       	ldi	r31, 0x00	; 0
  ae:	80 81       	ld	r24, Z
  b0:	80 68       	ori	r24, 0x80	; 128
  b2:	80 83       	st	Z, r24
	// set none-inverting mode
	TCCR1A |= (1 << WGM11);
  b4:	80 81       	ld	r24, Z
  b6:	82 60       	ori	r24, 0x02	; 2
  b8:	80 83       	st	Z, r24
	TCCR1B |= (1 << WGM12)|(1 << WGM13);
  ba:	e1 e8       	ldi	r30, 0x81	; 129
  bc:	f0 e0       	ldi	r31, 0x00	; 0
  be:	80 81       	ld	r24, Z
  c0:	88 61       	ori	r24, 0x18	; 24
  c2:	80 83       	st	Z, r24
	// set Fast PWM mode using ICR1 as TOP
	TCCR1B |= (1 << CS10);
  c4:	80 81       	ld	r24, Z
  c6:	81 60       	ori	r24, 0x01	; 1
  c8:	80 83       	st	Z, r24
	// START the timer with no prescaler
	
	sei();
  ca:	78 94       	sei
	PCICR |= (1<<PCIE1); // enables PCINT 14..8
  cc:	e8 e6       	ldi	r30, 0x68	; 104
  ce:	f0 e0       	ldi	r31, 0x00	; 0
  d0:	80 81       	ld	r24, Z
  d2:	82 60       	ori	r24, 0x02	; 2
  d4:	80 83       	st	Z, r24
	PCIFR |= (1<<PCIF1);
  d6:	d9 9a       	sbi	0x1b, 1	; 27
	PCMSK1 |= (1<<PCINT9); //enables pc interrupt 9 (PC1)
  d8:	ec e6       	ldi	r30, 0x6C	; 108
  da:	f0 e0       	ldi	r31, 0x00	; 0
  dc:	80 81       	ld	r24, Z
  de:	82 60       	ori	r24, 0x02	; 2
  e0:	80 83       	st	Z, r24
	ADCSRA= 0x83;//make ADC enable and select ck/128
  e2:	83 e8       	ldi	r24, 0x83	; 131
  e4:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
	ADMUX= 0xC0;//1.1V Vref, ADC0, right-justified
  e8:	80 ec       	ldi	r24, 0xC0	; 192
  ea:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7e007c>

	while (1)
	{	
		
		ADCSRA|=(1<<ADSC);//start conversion
  ee:	ea e7       	ldi	r30, 0x7A	; 122
  f0:	f0 e0       	ldi	r31, 0x00	; 0
		while((ADCSRA&(1<<ADIF))==0);//wait for conversion to finish
		ADCSRA |= (1<<ADIF);

		_delay_ms(100);
		
		if (ADC == 0)	 //when pot is at 0 (MIN) then PWM at 0
  f2:	a8 e7       	ldi	r26, 0x78	; 120
  f4:	b0 e0       	ldi	r27, 0x00	; 0
		else if (ADC >= 800 && ADC < 900)
			OCR1A = 50931;
		else if (ADC >= 900 && ADC < 1000)
			OCR1A = 56590;
		else if (ADC <= 1023) //when pot is at 1023 (MAX) then PWM at 95%
			OCR1A = 62258;		
  f6:	c8 e8       	ldi	r28, 0x88	; 136
  f8:	d0 e0       	ldi	r29, 0x00	; 0
  fa:	0f 2e       	mov	r0, r31
  fc:	f2 e3       	ldi	r31, 0x32	; 50
  fe:	2f 2e       	mov	r2, r31
 100:	f3 ef       	ldi	r31, 0xF3	; 243
 102:	3f 2e       	mov	r3, r31
 104:	f0 2d       	mov	r31, r0
		else if (ADC >= 700 && ADC < 800)
			OCR1A = 45272;
		else if (ADC >= 800 && ADC < 900)
			OCR1A = 50931;
		else if (ADC >= 900 && ADC < 1000)
			OCR1A = 56590;
 106:	0f 2e       	mov	r0, r31
 108:	fe e0       	ldi	r31, 0x0E	; 14
 10a:	4f 2e       	mov	r4, r31
 10c:	fd ed       	ldi	r31, 0xDD	; 221
 10e:	5f 2e       	mov	r5, r31
 110:	f0 2d       	mov	r31, r0
		else if (ADC >= 500 && ADC < 600)
			OCR1A = 33954;
		else if (ADC >= 600 && ADC < 700)
			OCR1A = 39613;
		else if (ADC >= 700 && ADC < 800)
			OCR1A = 45272;
 112:	0f 2e       	mov	r0, r31
 114:	f8 ed       	ldi	r31, 0xD8	; 216
 116:	6f 2e       	mov	r6, r31
 118:	f0 eb       	ldi	r31, 0xB0	; 176
 11a:	7f 2e       	mov	r7, r31
 11c:	f0 2d       	mov	r31, r0
		else if (ADC >= 400 && ADC < 500)
			OCR1A = 28295;
		else if (ADC >= 500 && ADC < 600)
			OCR1A = 33954;
		else if (ADC >= 600 && ADC < 700)
			OCR1A = 39613;
 11e:	0f 2e       	mov	r0, r31
 120:	fd eb       	ldi	r31, 0xBD	; 189
 122:	8f 2e       	mov	r8, r31
 124:	fa e9       	ldi	r31, 0x9A	; 154
 126:	9f 2e       	mov	r9, r31
 128:	f0 2d       	mov	r31, r0
		else if (ADC >= 300 && ADC < 400)
			OCR1A = 22636;
		else if (ADC >= 400 && ADC < 500)
			OCR1A = 28295;
		else if (ADC >= 500 && ADC < 600)
			OCR1A = 33954;
 12a:	0f 2e       	mov	r0, r31
 12c:	f2 ea       	ldi	r31, 0xA2	; 162
 12e:	af 2e       	mov	r10, r31
 130:	f4 e8       	ldi	r31, 0x84	; 132
 132:	bf 2e       	mov	r11, r31
 134:	f0 2d       	mov	r31, r0
		else if (ADC >= 200 && ADC < 300)
			OCR1A = 16977;
		else if (ADC >= 300 && ADC < 400)
			OCR1A = 22636;
		else if (ADC >= 400 && ADC < 500)
			OCR1A = 28295;
 136:	0f 2e       	mov	r0, r31
 138:	f7 e8       	ldi	r31, 0x87	; 135
 13a:	cf 2e       	mov	r12, r31
 13c:	fe e6       	ldi	r31, 0x6E	; 110
 13e:	df 2e       	mov	r13, r31
 140:	f0 2d       	mov	r31, r0
		else if (ADC >= 100 && ADC < 200)
			OCR1A = 11318;
		else if (ADC >= 200 && ADC < 300)
			OCR1A = 16977;
		else if (ADC >= 300 && ADC < 400)
			OCR1A = 22636;
 142:	0f 2e       	mov	r0, r31
 144:	fc e6       	ldi	r31, 0x6C	; 108
 146:	ef 2e       	mov	r14, r31
 148:	f8 e5       	ldi	r31, 0x58	; 88
 14a:	ff 2e       	mov	r15, r31
 14c:	f0 2d       	mov	r31, r0
		else if (ADC >= 0 && ADC < 100)
			OCR1A = 5659;
		else if (ADC >= 100 && ADC < 200)
			OCR1A = 11318;
		else if (ADC >= 200 && ADC < 300)
			OCR1A = 16977;
 14e:	61 e5       	ldi	r22, 0x51	; 81
 150:	72 e4       	ldi	r23, 0x42	; 66
		if (ADC == 0)	 //when pot is at 0 (MIN) then PWM at 0
			OCR1A = 0;	
		else if (ADC >= 0 && ADC < 100)
			OCR1A = 5659;
		else if (ADC >= 100 && ADC < 200)
			OCR1A = 11318;
 152:	46 e3       	ldi	r20, 0x36	; 54
 154:	5c e2       	ldi	r21, 0x2C	; 44
		_delay_ms(100);
		
		if (ADC == 0)	 //when pot is at 0 (MIN) then PWM at 0
			OCR1A = 0;	
		else if (ADC >= 0 && ADC < 100)
			OCR1A = 5659;
 156:	2b e1       	ldi	r18, 0x1B	; 27
 158:	36 e1       	ldi	r19, 0x16	; 22
	ADMUX= 0xC0;//1.1V Vref, ADC0, right-justified

	while (1)
	{	
		
		ADCSRA|=(1<<ADSC);//start conversion
 15a:	80 81       	ld	r24, Z
 15c:	80 64       	ori	r24, 0x40	; 64
 15e:	80 83       	st	Z, r24
		while((ADCSRA&(1<<ADIF))==0);//wait for conversion to finish
 160:	80 81       	ld	r24, Z
 162:	84 ff       	sbrs	r24, 4
 164:	fd cf       	rjmp	.-6      	; 0x160 <main+0xd0>
		ADCSRA |= (1<<ADIF);
 166:	80 81       	ld	r24, Z
 168:	80 61       	ori	r24, 0x10	; 16
 16a:	80 83       	st	Z, r24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 16c:	1f ef       	ldi	r17, 0xFF	; 255
 16e:	81 ee       	ldi	r24, 0xE1	; 225
 170:	94 e0       	ldi	r25, 0x04	; 4
 172:	11 50       	subi	r17, 0x01	; 1
 174:	80 40       	sbci	r24, 0x00	; 0
 176:	90 40       	sbci	r25, 0x00	; 0
 178:	e1 f7       	brne	.-8      	; 0x172 <main+0xe2>
 17a:	00 c0       	rjmp	.+0      	; 0x17c <main+0xec>
 17c:	00 00       	nop

		_delay_ms(100);
		
		if (ADC == 0)	 //when pot is at 0 (MIN) then PWM at 0
 17e:	8d 91       	ld	r24, X+
 180:	9c 91       	ld	r25, X
 182:	11 97       	sbiw	r26, 0x01	; 1
 184:	89 2b       	or	r24, r25
 186:	19 f4       	brne	.+6      	; 0x18e <main+0xfe>
			OCR1A = 0;	
 188:	19 82       	std	Y+1, r1	; 0x01
 18a:	18 82       	st	Y, r1
 18c:	e6 cf       	rjmp	.-52     	; 0x15a <main+0xca>
		else if (ADC >= 0 && ADC < 100)
 18e:	8d 91       	ld	r24, X+
 190:	9c 91       	ld	r25, X
 192:	11 97       	sbiw	r26, 0x01	; 1
 194:	8d 91       	ld	r24, X+
 196:	9c 91       	ld	r25, X
 198:	11 97       	sbiw	r26, 0x01	; 1
 19a:	84 36       	cpi	r24, 0x64	; 100
 19c:	91 05       	cpc	r25, r1
 19e:	18 f4       	brcc	.+6      	; 0x1a6 <main+0x116>
			OCR1A = 5659;
 1a0:	39 83       	std	Y+1, r19	; 0x01
 1a2:	28 83       	st	Y, r18
 1a4:	da cf       	rjmp	.-76     	; 0x15a <main+0xca>
		else if (ADC >= 100 && ADC < 200)
 1a6:	8d 91       	ld	r24, X+
 1a8:	9c 91       	ld	r25, X
 1aa:	11 97       	sbiw	r26, 0x01	; 1
 1ac:	84 36       	cpi	r24, 0x64	; 100
 1ae:	91 05       	cpc	r25, r1
 1b0:	48 f0       	brcs	.+18     	; 0x1c4 <main+0x134>
 1b2:	8d 91       	ld	r24, X+
 1b4:	9c 91       	ld	r25, X
 1b6:	11 97       	sbiw	r26, 0x01	; 1
 1b8:	88 3c       	cpi	r24, 0xC8	; 200
 1ba:	91 05       	cpc	r25, r1
 1bc:	18 f4       	brcc	.+6      	; 0x1c4 <main+0x134>
			OCR1A = 11318;
 1be:	59 83       	std	Y+1, r21	; 0x01
 1c0:	48 83       	st	Y, r20
 1c2:	cb cf       	rjmp	.-106    	; 0x15a <main+0xca>
		else if (ADC >= 200 && ADC < 300)
 1c4:	8d 91       	ld	r24, X+
 1c6:	9c 91       	ld	r25, X
 1c8:	11 97       	sbiw	r26, 0x01	; 1
 1ca:	88 3c       	cpi	r24, 0xC8	; 200
 1cc:	91 05       	cpc	r25, r1
 1ce:	48 f0       	brcs	.+18     	; 0x1e2 <main+0x152>
 1d0:	8d 91       	ld	r24, X+
 1d2:	9c 91       	ld	r25, X
 1d4:	11 97       	sbiw	r26, 0x01	; 1
 1d6:	8c 32       	cpi	r24, 0x2C	; 44
 1d8:	91 40       	sbci	r25, 0x01	; 1
 1da:	18 f4       	brcc	.+6      	; 0x1e2 <main+0x152>
			OCR1A = 16977;
 1dc:	79 83       	std	Y+1, r23	; 0x01
 1de:	68 83       	st	Y, r22
 1e0:	bc cf       	rjmp	.-136    	; 0x15a <main+0xca>
		else if (ADC >= 300 && ADC < 400)
 1e2:	8d 91       	ld	r24, X+
 1e4:	9c 91       	ld	r25, X
 1e6:	11 97       	sbiw	r26, 0x01	; 1
 1e8:	8c 32       	cpi	r24, 0x2C	; 44
 1ea:	91 40       	sbci	r25, 0x01	; 1
 1ec:	48 f0       	brcs	.+18     	; 0x200 <main+0x170>
 1ee:	8d 91       	ld	r24, X+
 1f0:	9c 91       	ld	r25, X
 1f2:	11 97       	sbiw	r26, 0x01	; 1
 1f4:	80 39       	cpi	r24, 0x90	; 144
 1f6:	91 40       	sbci	r25, 0x01	; 1
 1f8:	18 f4       	brcc	.+6      	; 0x200 <main+0x170>
			OCR1A = 22636;
 1fa:	f9 82       	std	Y+1, r15	; 0x01
 1fc:	e8 82       	st	Y, r14
 1fe:	ad cf       	rjmp	.-166    	; 0x15a <main+0xca>
		else if (ADC >= 400 && ADC < 500)
 200:	8d 91       	ld	r24, X+
 202:	9c 91       	ld	r25, X
 204:	11 97       	sbiw	r26, 0x01	; 1
 206:	80 39       	cpi	r24, 0x90	; 144
 208:	91 40       	sbci	r25, 0x01	; 1
 20a:	48 f0       	brcs	.+18     	; 0x21e <main+0x18e>
 20c:	8d 91       	ld	r24, X+
 20e:	9c 91       	ld	r25, X
 210:	11 97       	sbiw	r26, 0x01	; 1
 212:	84 3f       	cpi	r24, 0xF4	; 244
 214:	91 40       	sbci	r25, 0x01	; 1
 216:	18 f4       	brcc	.+6      	; 0x21e <main+0x18e>
			OCR1A = 28295;
 218:	d9 82       	std	Y+1, r13	; 0x01
 21a:	c8 82       	st	Y, r12
 21c:	9e cf       	rjmp	.-196    	; 0x15a <main+0xca>
		else if (ADC >= 500 && ADC < 600)
 21e:	8d 91       	ld	r24, X+
 220:	9c 91       	ld	r25, X
 222:	11 97       	sbiw	r26, 0x01	; 1
 224:	84 3f       	cpi	r24, 0xF4	; 244
 226:	91 40       	sbci	r25, 0x01	; 1
 228:	48 f0       	brcs	.+18     	; 0x23c <main+0x1ac>
 22a:	8d 91       	ld	r24, X+
 22c:	9c 91       	ld	r25, X
 22e:	11 97       	sbiw	r26, 0x01	; 1
 230:	88 35       	cpi	r24, 0x58	; 88
 232:	92 40       	sbci	r25, 0x02	; 2
 234:	18 f4       	brcc	.+6      	; 0x23c <main+0x1ac>
			OCR1A = 33954;
 236:	b9 82       	std	Y+1, r11	; 0x01
 238:	a8 82       	st	Y, r10
 23a:	8f cf       	rjmp	.-226    	; 0x15a <main+0xca>
		else if (ADC >= 600 && ADC < 700)
 23c:	8d 91       	ld	r24, X+
 23e:	9c 91       	ld	r25, X
 240:	11 97       	sbiw	r26, 0x01	; 1
 242:	88 35       	cpi	r24, 0x58	; 88
 244:	92 40       	sbci	r25, 0x02	; 2
 246:	48 f0       	brcs	.+18     	; 0x25a <main+0x1ca>
 248:	8d 91       	ld	r24, X+
 24a:	9c 91       	ld	r25, X
 24c:	11 97       	sbiw	r26, 0x01	; 1
 24e:	8c 3b       	cpi	r24, 0xBC	; 188
 250:	92 40       	sbci	r25, 0x02	; 2
 252:	18 f4       	brcc	.+6      	; 0x25a <main+0x1ca>
			OCR1A = 39613;
 254:	99 82       	std	Y+1, r9	; 0x01
 256:	88 82       	st	Y, r8
 258:	80 cf       	rjmp	.-256    	; 0x15a <main+0xca>
		else if (ADC >= 700 && ADC < 800)
 25a:	8d 91       	ld	r24, X+
 25c:	9c 91       	ld	r25, X
 25e:	11 97       	sbiw	r26, 0x01	; 1
 260:	8c 3b       	cpi	r24, 0xBC	; 188
 262:	92 40       	sbci	r25, 0x02	; 2
 264:	48 f0       	brcs	.+18     	; 0x278 <main+0x1e8>
 266:	8d 91       	ld	r24, X+
 268:	9c 91       	ld	r25, X
 26a:	11 97       	sbiw	r26, 0x01	; 1
 26c:	80 32       	cpi	r24, 0x20	; 32
 26e:	93 40       	sbci	r25, 0x03	; 3
 270:	18 f4       	brcc	.+6      	; 0x278 <main+0x1e8>
			OCR1A = 45272;
 272:	79 82       	std	Y+1, r7	; 0x01
 274:	68 82       	st	Y, r6
 276:	71 cf       	rjmp	.-286    	; 0x15a <main+0xca>
		else if (ADC >= 800 && ADC < 900)
 278:	8d 91       	ld	r24, X+
 27a:	9c 91       	ld	r25, X
 27c:	11 97       	sbiw	r26, 0x01	; 1
 27e:	80 32       	cpi	r24, 0x20	; 32
 280:	93 40       	sbci	r25, 0x03	; 3
 282:	58 f0       	brcs	.+22     	; 0x29a <main+0x20a>
 284:	8d 91       	ld	r24, X+
 286:	9c 91       	ld	r25, X
 288:	11 97       	sbiw	r26, 0x01	; 1
 28a:	84 38       	cpi	r24, 0x84	; 132
 28c:	93 40       	sbci	r25, 0x03	; 3
 28e:	28 f4       	brcc	.+10     	; 0x29a <main+0x20a>
			OCR1A = 50931;
 290:	83 ef       	ldi	r24, 0xF3	; 243
 292:	96 ec       	ldi	r25, 0xC6	; 198
 294:	99 83       	std	Y+1, r25	; 0x01
 296:	88 83       	st	Y, r24
 298:	60 cf       	rjmp	.-320    	; 0x15a <main+0xca>
		else if (ADC >= 900 && ADC < 1000)
 29a:	8d 91       	ld	r24, X+
 29c:	9c 91       	ld	r25, X
 29e:	11 97       	sbiw	r26, 0x01	; 1
 2a0:	84 38       	cpi	r24, 0x84	; 132
 2a2:	93 40       	sbci	r25, 0x03	; 3
 2a4:	48 f0       	brcs	.+18     	; 0x2b8 <main+0x228>
 2a6:	8d 91       	ld	r24, X+
 2a8:	9c 91       	ld	r25, X
 2aa:	11 97       	sbiw	r26, 0x01	; 1
 2ac:	88 3e       	cpi	r24, 0xE8	; 232
 2ae:	93 40       	sbci	r25, 0x03	; 3
 2b0:	18 f4       	brcc	.+6      	; 0x2b8 <main+0x228>
			OCR1A = 56590;
 2b2:	59 82       	std	Y+1, r5	; 0x01
 2b4:	48 82       	st	Y, r4
 2b6:	51 cf       	rjmp	.-350    	; 0x15a <main+0xca>
		else if (ADC <= 1023) //when pot is at 1023 (MAX) then PWM at 95%
 2b8:	8d 91       	ld	r24, X+
 2ba:	9c 91       	ld	r25, X
 2bc:	11 97       	sbiw	r26, 0x01	; 1
 2be:	81 15       	cp	r24, r1
 2c0:	94 40       	sbci	r25, 0x04	; 4
 2c2:	08 f0       	brcs	.+2      	; 0x2c6 <main+0x236>
 2c4:	4a cf       	rjmp	.-364    	; 0x15a <main+0xca>
			OCR1A = 62258;		
 2c6:	39 82       	std	Y+1, r3	; 0x01
 2c8:	28 82       	st	Y, r2
 2ca:	47 cf       	rjmp	.-370    	; 0x15a <main+0xca>

000002cc <__vector_4>:
	}
}

ISR(PCINT1_vect){
 2cc:	1f 92       	push	r1
 2ce:	0f 92       	push	r0
 2d0:	0f b6       	in	r0, 0x3f	; 63
 2d2:	0f 92       	push	r0
 2d4:	11 24       	eor	r1, r1
 2d6:	2f 93       	push	r18
 2d8:	8f 93       	push	r24
 2da:	9f 93       	push	r25
		if (buttonpress==1 && SW != 0){
 2dc:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
 2e0:	81 30       	cpi	r24, 0x01	; 1
 2e2:	81 f4       	brne	.+32     	; 0x304 <__vector_4+0x38>
 2e4:	31 9b       	sbis	0x06, 1	; 6
 2e6:	1f c0       	rjmp	.+62     	; 0x326 <__vector_4+0x5a>
 2e8:	2f ef       	ldi	r18, 0xFF	; 255
 2ea:	85 ea       	ldi	r24, 0xA5	; 165
 2ec:	9e e0       	ldi	r25, 0x0E	; 14
 2ee:	21 50       	subi	r18, 0x01	; 1
 2f0:	80 40       	sbci	r24, 0x00	; 0
 2f2:	90 40       	sbci	r25, 0x00	; 0
 2f4:	e1 f7       	brne	.-8      	; 0x2ee <__vector_4+0x22>
 2f6:	00 c0       	rjmp	.+0      	; 0x2f8 <__vector_4+0x2c>
 2f8:	00 00       	nop
			_delay_ms(300);
			PORTD = 0b00000010; //AIN2 = 1 and AIN1 = 0
 2fa:	82 e0       	ldi	r24, 0x02	; 2
 2fc:	8b b9       	out	0x0b, r24	; 11
			buttonpress = 0;
 2fe:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <_edata>
 302:	11 c0       	rjmp	.+34     	; 0x326 <__vector_4+0x5a>
		}
		
		else if (buttonpress==0 && SW != 0){ //if button pressed
 304:	81 11       	cpse	r24, r1
 306:	0f c0       	rjmp	.+30     	; 0x326 <__vector_4+0x5a>
 308:	31 9b       	sbis	0x06, 1	; 6
 30a:	0d c0       	rjmp	.+26     	; 0x326 <__vector_4+0x5a>
 30c:	2f ef       	ldi	r18, 0xFF	; 255
 30e:	85 ea       	ldi	r24, 0xA5	; 165
 310:	9e e0       	ldi	r25, 0x0E	; 14
 312:	21 50       	subi	r18, 0x01	; 1
 314:	80 40       	sbci	r24, 0x00	; 0
 316:	90 40       	sbci	r25, 0x00	; 0
 318:	e1 f7       	brne	.-8      	; 0x312 <__vector_4+0x46>
 31a:	00 c0       	rjmp	.+0      	; 0x31c <__vector_4+0x50>
 31c:	00 00       	nop
			_delay_ms(300);
			PORTD = 0; //AIN1 and AIN2 = 0
 31e:	1b b8       	out	0x0b, r1	; 11
			buttonpress = 1;
 320:	81 e0       	ldi	r24, 0x01	; 1
 322:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <_edata>
		}			
}
 326:	9f 91       	pop	r25
 328:	8f 91       	pop	r24
 32a:	2f 91       	pop	r18
 32c:	0f 90       	pop	r0
 32e:	0f be       	out	0x3f, r0	; 63
 330:	0f 90       	pop	r0
 332:	1f 90       	pop	r1
 334:	18 95       	reti

00000336 <_exit>:
 336:	f8 94       	cli

00000338 <__stop_program>:
 338:	ff cf       	rjmp	.-2      	; 0x338 <__stop_program>
